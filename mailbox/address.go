package mailbox

import (
	"errors"
	"regexp"
	"strings"

	"github.com/google/uuid"
)

var mailAddressRegexp = regexp.MustCompile(`^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$`)

// Address represents a mail address.
type Address string

// ParseAddr creates an Address from one line string.
//
// # Errors
//   - If addr is invalid format for mail address.
func ParseAddr(addr string) (*Address, error) {
	if !mailAddressRegexp.Match([]byte(addr)) {
		return nil, errors.New("invalid")
	}
	a := Address(addr)
	return &a, nil
}

// MustParseAddr creates an Address from one line string.
//
// # Panics
//   - If addr is invalid format for mail address.
func MustParseAddr(addr string) Address {
	a, err := ParseAddr(addr)
	if err != nil {
		panic(err)
	}
	return *a
}

// NewAddr creates an Address from user and domain.
//
// # Errors
//   - If provides invalid format for mail address.
func NewAddr(user string, domain string) (*Address, error) {
	return ParseAddr(user + "@" + domain)
}

// RandomAddr creates an Address with user that generated by uuid v4.
//
// # Errors
//   - If provides invalid format for mail address.
func RandomAddr(domain string) (*Address, error) {
	return NewAddr(uuid.NewString(), domain)
}

// User returns a section of user in address.
func (a Address) User() string {
	return strings.Split(a.String(), "@")[0]
}

// Domain returns a section of domain in address.
func (a Address) Domain() string {
	return strings.Split(a.String(), "@")[1]
}

func (a Address) String() string {
	return string(a)
}
